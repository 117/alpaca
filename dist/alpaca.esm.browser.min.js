import t from"bottleneck";import e from"qs";import r from"ky-universal";import a from"isomorphic-ws";import s from"eventemitter3";var i={rest:{account:"https://api.alpaca.markets/v2",market_data:"https://data.alpaca.markets/v1"},websocket:{account:"wss://api.alpaca.markets/stream",account_paper:"wss://paper-api.alpaca.markets/stream",market_data:"wss://data.alpaca.markets/stream"}};function n(t){if(t)try{return{...t,raw:()=>t,created_at:new Date(t.created_at),updated_at:new Date(t.updated_at),submitted_at:new Date(t.submitted_at),filled_at:new Date(t.filled_at),expired_at:new Date(t.expired_at),canceled_at:new Date(t.canceled_at),failed_at:new Date(t.failed_at),replaced_at:new Date(t.replaced_at),qty:l(t.qty),filled_qty:l(t.filled_qty),type:t.type,side:t.side,time_in_force:t.time_in_force,limit_price:l(t.limit_price),stop_price:l(t.stop_price),filled_avg_price:l(t.filled_avg_price),status:t.status,legs:c(t.legs),trail_price:l(t.trail_price),trail_percent:l(t.trail_percent),hwm:l(t.hwm)}}catch(t){throw new Error(`Order parsing failed. ${t.message}`)}}function c(t){return t?t.map((t=>n(t))):void 0}function o(t){if(t)try{return{...t,raw:()=>t,avg_entry_price:l(t.avg_entry_price),qty:l(t.qty),side:t.side,market_value:l(t.market_value),cost_basis:l(t.cost_basis),unrealized_pl:l(t.unrealized_pl),unrealized_plpc:l(t.unrealized_plpc),unrealized_intraday_pl:l(t.unrealized_intraday_pl),unrealized_intraday_plpc:l(t.unrealized_intraday_plpc),current_price:l(t.current_price),lastday_price:l(t.lastday_price),change_today:l(t.change_today)}}catch(t){throw new Error(`Position parsing failed. ${t.message}`)}}function u(t){if(t)try{return{...t,raw:()=>t,cum_qty:l(t.cum_qty),leaves_qty:l(t.leaves_qty),price:l(t.price),qty:l(t.qty),side:t.side,type:t.type}}catch(t){throw new Error(`TradeActivity parsing failed. ${t.message}`)}}function d(t){if(t)try{return{...t,raw:()=>t,net_amount:l(t.net_amount),qty:l(t.qty),per_share_amount:l(t.per_share_amount)}}catch(t){throw new Error(`NonTradeActivity parsing failed. ${t.message}`)}}function l(t){return void 0===t?t:parseFloat(t)}var h={account:function(t){if(t)try{return{...t,raw:()=>t,buying_power:l(t.buying_power),regt_buying_power:l(t.regt_buying_power),daytrading_buying_power:l(t.daytrading_buying_power),cash:l(t.cash),created_at:new Date(t.created_at),portfolio_value:l(t.portfolio_value),multiplier:l(t.multiplier),equity:l(t.equity),last_equity:l(t.last_equity),long_market_value:l(t.long_market_value),short_market_value:l(t.short_market_value),initial_margin:l(t.initial_margin),maintenance_margin:l(t.maintenance_margin),last_maintenance_margin:l(t.last_maintenance_margin),sma:l(t.sma),status:t.status}}catch(t){throw new Error(`Account parsing failed. ${t.message}`)}},activities:function(t){if(t)try{return t.map((t=>"FILL"===t.activity_type?u(t):d(t)))}catch(t){throw new Error(`Activity parsing failed. ${t.message}`)}},clock:function(t){if(t)try{return{raw:()=>t,timestamp:new Date(t.timestamp),is_open:t.is_open,next_open:new Date(t.next_open),next_close:new Date(t.next_close)}}catch(t){throw new Error(`Order parsing failed. ${t.message}`)}},nonTradeActivity:d,order:n,orders:c,position:o,positions:function(t){return t?t.map((t=>o(t))):void 0},tradeActivity:u};class p{constructor(e){if(this.params=e,this.limiter=new t({reservoir:200,reservoirRefreshAmount:200,reservoirRefreshInterval:6e4,maxConcurrent:1,minTime:200}),"access_token"in e.credentials&&("key"in e.credentials||"secret"in e.credentials))throw new Error("can't create client with both default and oauth credentials")}async isAuthenticated(){try{return await this.getAccount(),!0}catch{return!1}}async getAccount(){return h.account(await this.request("GET",i.rest.account,"account"))}async getOrder(t){return h.order(await this.request("GET",i.rest.account,`orders/${t.order_id||t.client_order_id}?${e.stringify({nested:t.nested})}`))}async getOrders(t){return h.orders(await this.request("GET",i.rest.account,`orders?${e.stringify(t)}`))}async placeOrder(t){return h.order(await this.request("POST",i.rest.account,"orders",t))}async replaceOrder(t){return h.order(await this.request("PATCH",i.rest.account,`orders/${t.order_id}`,t))}async cancelOrder(t){return h.order(await this.request("DELETE",i.rest.account,`orders/${t.order_id}`))}async cancelOrders(){return h.orders(await this.request("DELETE",i.rest.account,"orders"))}async getPosition(t){return h.position(await this.request("GET",i.rest.account,`positions/${t.symbol}`))}async getPositions(){return h.positions(await this.request("GET",i.rest.account,"positions"))}async closePosition(t){return h.order(await this.request("DELETE",i.rest.account,`positions/${t.symbol}`))}async closePositions(){return h.orders(await this.request("DELETE",i.rest.account,"positions"))}getAsset(t){return this.request("GET",i.rest.account,`assets/${t.asset_id_or_symbol}`)}getAssets(t){return this.request("GET",i.rest.account,`assets?${e.stringify(t)}`)}getWatchlist(t){return this.request("GET",i.rest.account,`watchlists/${t.uuid}`)}getWatchlists(){return this.request("GET",i.rest.account,"watchlists")}createWatchlist(t){return this.request("POST",i.rest.account,"watchlists",t)}updateWatchlist(t){return this.request("PUT",i.rest.account,`watchlists/${t.uuid}`,t)}addToWatchlist(t){return this.request("POST",i.rest.account,`watchlists/${t.uuid}`,t)}removeFromWatchlist(t){return this.request("DELETE",i.rest.account,`watchlists/${t.uuid}/${t.symbol}`)}deleteWatchlist(t){return this.request("DELETE",i.rest.account,`watchlists/${t.uuid}`)}getCalendar(t){return this.request("GET",i.rest.account,`calendar?${e.stringify(t)}`)}async getClock(){return h.clock(await this.request("GET",i.rest.account,"clock"))}getAccountConfigurations(){return this.request("GET",i.rest.account,"account/configurations")}updateAccountConfigurations(t){return this.request("PATCH",i.rest.account,"account/configurations",t)}async getAccountActivities(t){return t.activity_types&&Array.isArray(t.activity_types)&&(t.activity_types=t.activity_types.join(",")),h.activities(await this.request("GET",i.rest.account,`account/activities${t.activity_type?"/".concat(t.activity_type):""}?${e.stringify(t)}`))}getPortfolioHistory(t){return this.request("GET",i.rest.account,`account/portfolio/history?${e.stringify(t)}`)}getBars(t){const r={...t,symbols:t.symbols.join(",")};return this.request("GET",i.rest.market_data,`bars/${t.timeframe}?${e.stringify(r)}`)}getLastTrade(t){return this.request("GET",i.rest.market_data,`last/stocks/${t.symbol}`)}getLastQuote(t){return this.request("GET",i.rest.market_data,`last_quote/stocks/${t.symbol}`)}request(t,e,a,s){let n={};if("access_token"in this.params.credentials?n.Authorization=`Bearer ${this.params.credentials.access_token}`:(n["APCA-API-KEY-ID"]=this.params.credentials.key,n["APCA-API-SECRET-KEY"]=this.params.credentials.secret,this.params.credentials.key.startsWith("PK")&&e==i.rest.account&&(e=i.rest.account.replace("api.","paper-api."))),s)for(let[t,e]of Object.entries(s))e instanceof Date&&(s[t]=e.toISOString());return new Promise((async(i,c)=>{const o=()=>r(`${e}/${a}`,{method:t,headers:n,body:JSON.stringify(s)}),u=this.params.rate_limit?()=>this.limiter.schedule(o):o;await u().then((async t=>await t.json().catch((()=>!1))||{})).then((t=>"code"in t&&"message"in t?c(t):i(t))).catch(c)}))}}class _ extends s{constructor(t){switch(super(),this.params=t,this.subscriptions=[],this.authenticated=!1,t.stream){case"account":this.host=t.credentials.key.startsWith("PK")?i.websocket.account_paper:i.websocket.account;break;case"market_data":this.host=i.websocket.market_data;break;default:this.host="unknown"}this.connection=new a(this.host).once("open",(()=>{this.authenticated||this.connection.send(JSON.stringify({action:"authenticate",data:{key_id:t.credentials.key,secret_key:t.credentials.secret}})),this.emit("open",this)})).once("close",(()=>this.emit("close",this))).on("message",(t=>{const e=JSON.parse(t.toString());if("stream"in e&&"authorization"==e.stream){if("authorized"!=e.data.status)throw this.connection.close(),new Error("There was an error in authorizing your websocket connection. Object received: "+JSON.stringify(e,null,2));this.authenticated=!0,this.emit("authenticated",this),console.log("Connected to the websocket.")}if(this.emit("message",e),"stream"in e){const t={trade_updates:"trade_updates",account_updates:"account_updates",T:"trade",Q:"quote",AM:"aggregate_minute"};this.emit(t[e.stream.split(".")[0]],e.data)}})).on("error",(t=>this.emit("error",t)))}send(t){if(!this.authenticated)throw new Error("You can't send a message until you are authenticated!");return"object"==typeof t&&(t=JSON.stringify(t)),this.connection.send(t),this}subscribe(t){return this.subscriptions.push(...t),this.send(JSON.stringify({action:"listen",data:{streams:t}}))}unsubscribe(t){for(let e=0,r=this.subscriptions.length;e<r;e++)t.includes(this.subscriptions[e])&&this.subscriptions.splice(e,1);return this.send(JSON.stringify({action:"unlisten",data:{streams:t}}))}}var m={AlpacaClient:p,AlpacaStream:_};export default m;export{p as AlpacaClient,_ as AlpacaStream};
